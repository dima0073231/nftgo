require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const http = require('http');
const WebSocket = require('ws');
const CryptoBotAPI = require('crypto-bot-api');
const axios = require('axios');
const cron = require('node-cron');

const User = require('./api/users'); // –ú–æ–¥–µ–ª—å
const connectDB = require('./db/db'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const Invoice = require('./api/invoice'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Invoice
const TonTransaction = require('./api/tonTransaction'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ TonTransaction

const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ CryptoBotAPI
const cryptoBotClient = new CryptoBotAPI(process.env.CRYPTOBOT_TOKEN);

// ‚úÖ CORS
app.use(cors({
  origin: 'https://dima0073231.github.io',
  credentials: true
}));


app.options('*', cors({
  origin: 'https://dima0073231.github.io',
  credentials: true
}));


app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
connectDB();

// üì¶ –†–æ—É—Ç—ã
app.get('/api/users', async (req, res) => {
  try {
    const users = await User.find().sort({ createdAt: -1 });
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post('/api/users', async (req, res) => {
  try {
    const user = new User(req.body);
    await user.save();
    res.status(201).json(user);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get('/api/users/:telegramId/history', async (req, res) => {
  let telegramId = Number(req.params.telegramId);
  if (!telegramId || isNaN(telegramId)) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegramId' });
  }
  try {
    const user = await User.findOne({ telegramId });
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.status(200).json({ history: user.gameHistory || [] });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å TON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö–µ—à—É
app.get('/api/ton/transaction/:txHash', async (req, res) => {
  try {
    const txHash = req.params.txHash;
    if (!txHash) return res.status(400).json({ ok: false, error: "txHash required" });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
    const response = await axios.get(
      `https://toncenter.com/api/v2/getTransaction?hash=${txHash}&api_key=${process.env.TONCENTER_API_TOKEN}`
    );
    if (response.data.ok && response.data.result) {
      return res.json({ ok: true, result: response.data.result });
    }
    return res.status(404).json({ ok: false, error: "Transaction not found" });
  } catch (error) {
    console.error("Error verifying TON transaction:", error);
    res.status(500).json({ ok: false, error: "Server error" });
  }
});


// –î–æ–±–∞–≤–ª—è–µ–º –≤ server.js
let gameState = {
  isRunning: false,      // –ò–¥–µ—Ç –ª–∏ –∏–≥—Ä–∞
  coefficient: 1.00,    // –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
  crashAt: null,        // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∞—à–∞
  players: new Map()    // –ò–≥—Ä–æ–∫–∏ –∏ –∏—Ö —Å—Ç–∞–≤–∫–∏: { telegramId, bet, hasCashedOut }
};

function generateCrashPoint() {
  // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∏–∑ frog-game.js (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ª–≥–æ—Ä–∏—Ç–º —É–º–Ω–æ–∂–µ–Ω–∏—è)
  return Math.random() < 0.3 ? 2.5 + Math.random() * 3 : 1.5 + Math.random();
}

function startGame() {
  if (gameState.isRunning) return;
  
  gameState = {
    isRunning: true,
    coefficient: 1.00,
    crashAt: generateCrashPoint(),
    players: new Map()
  };

  // –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤—Å–µ–º
  broadcastGameState();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
  const gameLoop = setInterval(() => {
    if (!gameState.isRunning) {
      clearInterval(gameLoop);
      return;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É frog-game.js)
    gameState.coefficient += 0.01 * Math.log(gameState.coefficient + 1);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—à
    if (gameState.coefficient >= gameState.crashAt) {
      endGame();
      clearInterval(gameLoop);
    }
    
    broadcastGameState();
  }, 100); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º—Å)
}

function endGame() {
  gameState.isRunning = false;
  broadcastGameState();
  
  // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
  setTimeout(startGame, 5000);
}

function broadcastGameState() {
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify({
        type: 'gameUpdate',
        ...gameState
      }));
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
wss.on('connection', (socket) => {
  socket.on('message', (data) => {
    const msg = JSON.parse(data);
    
    if (msg.type === 'placeBet' && !gameState.players.has(msg.telegramId)) {
      gameState.players.set(msg.telegramId, { 
        bet: msg.bet, 
        hasCashedOut: false 
      });
      broadcastGameState();
    }
    
    if (msg.type === 'cashout' && gameState.players.has(msg.telegramId)) {
      const player = gameState.players.get(msg.telegramId);
      if (!player.hasCashedOut && gameState.isRunning) {
        player.hasCashedOut = true;
        const win = player.bet * gameState.coefficient;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –∏–≥—Ä–æ–∫—É
        socket.send(JSON.stringify({
          type: 'cashoutSuccess',
          win
        }));
        
        broadcastGameState();
      }
    }
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É
startGame();


// === –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ ===
app.post('/api/cryptobot/create-invoice', async (req, res) => {
  let { amount } = req.body;
  amount = Number(amount);
  if (!amount || isNaN(amount) || amount < 1) {
    return res.status(400).json({ ok: false, error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 1 TON' });
  }

  try {
    console.log('–ó–∞–ø—Ä–æ—Å –∫ CryptoBot API:', {
      asset: 'TON',
      amount: amount.toString(),
      description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NFTGo',
      hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!',
      paid_btn_name: 'openBot',
      paid_btn_url: 'https://t.me/nftgo_bot'
    });

    const response = await axios.post(
      'https://pay.crypt.bot/api/createInvoice',
      {
        asset: 'TON',
        amount: amount.toString(), // CryptoBot API —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫—É
        description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NFTGo',
        hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!',
        paid_btn_name: 'openBot', // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        paid_btn_url: 'https://t.me/nftgo_bot'
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Crypto-Pay-API-Token': process.env.CRYPTOBOT_TOKEN
        }
      }
    );

    console.log('–û—Ç–≤–µ—Ç –æ—Ç CryptoBot API:', response.data);

    if (!response.data.ok || !response.data.result?.invoice_id) {
      return res.status(400).json({ ok: false, error: response.data.description || '–û—à–∏–±–∫–∞ CryptoBot' });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const newInvoice = new Invoice({
      invoiceId: response.data.result.invoice_id, // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ invoice_id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
      telegramId: req.body.telegramId, // Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      amount, // –°—É–º–º–∞ –∏–Ω–≤–æ–π—Å–∞
      status: 'pending' // –°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    });
    await newInvoice.save();

    res.json({ ok: true, result: response.data.result });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ CryptoBot:', err?.response?.data || err);
    res.status(500).json({ ok: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ crypto-bot-api
app.get('/api/cryptobot/invoice/:invoiceId', async (req, res) => {
  try {
    const { invoiceId } = req.params;
    if (!invoiceId) return res.status(400).json({ ok: false, error: 'invoiceId required' });

    // –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ getInvoices
    const invoicesData = await cryptoBotClient.getInvoices({ invoice_ids: [invoiceId] });
    const invoice = invoicesData.items?.[0];
    if (!invoice) {
      return res.status(404).json({ ok: false, error: '–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json({ ok: true, result: invoice });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞:', err);
    res.status(500).json({ ok: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞' });
  }
});


app.get('/api/cryptobot/invoice', async (req, res) => {
  try {
    const invoices = await Invoice.find(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–≤–æ–π—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    res.json({ ok: true, result: invoices });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–æ–≤:', err);
    res.status(500).json({ ok: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–æ–≤' });
  }
});



// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
async function updateInvoice(invoiceId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const invoice = await Invoice.findOne({ invoiceId });
    if (!invoice) {
      return { ok: false, error: '–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ getInvoices (crypto-bot-api)
    const invoicesData = await cryptoBotClient.getInvoices({ invoice_ids: [invoiceId] });
    const invoiceData = invoicesData.items?.[0];
    if (!invoiceData) {
      return { ok: false, error: '–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CryptoBot' };
    }

    if (invoiceData.status === 'paid') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      invoice.status = 'paid';
      await invoice.save();

      // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ telegramId: invoice.telegramId });
      if (user) {
        user.balance += invoice.amount;
        await user.save();
      }

      return { ok: true, message: '–ò–Ω–≤–æ–π—Å –æ–ø–ª–∞—á–µ–Ω, –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω' };
    } else {
      return { ok: true, message: `–ò–Ω–≤–æ–π—Å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: ${invoiceData.status}` };
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞:', err);
    return { ok: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
  }
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ===
app.post('/api/cryptobot/update-invoice', async (req, res) => {
  const { invoiceId } = req.body;

  if (!invoiceId) {
    return res.status(400).json({ ok: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω invoiceId' });
  }

  const result = await updateInvoice(invoiceId);
  if (!result.ok) {
    return res.status(400).json(result);
  }

  res.json(result);
});


app.post('/api/users/:telegramId/history', async (req, res) => {
  let telegramId = Number(req.params.telegramId);
  if (!telegramId || isNaN(telegramId)) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegramId' });
  }
  const { date, betAmount, coefficient, result } = req.body;
  if (!date || !betAmount || !coefficient || !result) {
    return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' });
  }
  try {
    const user = await User.findOne({ telegramId });
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    user.gameHistory.push({ date, betAmount, coefficient, result });
    await user.save();
    res.status(200).json({ message: '–ò—Å—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post('/api/addbalance/ton', async (req, res) => {
  let telegramId = Number(req.body.telegramId);
  const amount = req.body.amount;
  if (!telegramId || isNaN(telegramId) || typeof amount !== "number" || !isFinite(amount)) {
    return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }
  try {
    const user = await User.findOne({ telegramId });
    if (!user) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    user.balance += amount;
    await user.save();
    res.json({ message: "–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω", balance: user.balance });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// === –ù–æ–≤—ã–π —Ä–æ—É—Ç: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã CryptoBot ===

app.post('/api/addbalance/cryptobot', async (req, res) => {
  try {
    let { telegramId, invoiceId } = req.body;
    telegramId = Number(telegramId);
    if (!telegramId || isNaN(telegramId) || !invoiceId) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (telegramId –∏–ª–∏ invoiceId)' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç invoiceId
    const existingInvoice = await Invoice.findOne({ invoiceId });
    if (existingInvoice) {
      return res.status(400).json({ error: '–ò–Ω–≤–æ–π—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É crypto-bot-api
    const invoice = await cryptoBotClient.getInvoice(invoiceId);

    if (invoice.status !== 'paid') {
      return res.status(400).json({ error: '–ò–Ω–≤–æ–π—Å –Ω–µ –æ–ø–ª–∞—á–µ–Ω' });
    }

    const user = await User.findOne({ telegramId });
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const amount = Number(invoice.amount);
    user.balance += amount;
    await user.save();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å –≤ –ë–î
    await Invoice.create({
      invoiceId,
      telegramId,
      amount,
      status: invoice.status
    });

    res.json({ message: '–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω', balance: user.balance });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ CryptoBot:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞' });
  }
});



const { ethers } = require('ethers');


// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞
const provider = new ethers.providers.JsonRpcProvider(process.env.BLOCKCHAIN_PROVIDER_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

// –†–æ—É—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
app.post('/addbalance', async (req, res) => {
    try {
        const { address, transactionHash } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const tx = await provider.getTransaction(transactionHash);
        if (!tx) {
            return res.status(400).send('Transaction not found');
        }
        
        // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const receipt = await tx.wait();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –∏ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è - –Ω–∞—à
        if (receipt.status !== 1 || tx.to.toLowerCase() !== wallet.address.toLowerCase()) {
            return res.status(400).send('Invalid transaction');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ (–≤ wei)
        const value = tx.value;
        const amountInEth = ethers.utils.formatEther(value);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.updateOne(
            { address: address.toLowerCase() },
            { $inc: { balance: parseFloat(amountInEth) } }
        );
        
        res.send({ success: true, newBalance: amountInEth });
    } catch (error) {
        console.error(error);
        res.status(500).send('Server error');
    }
});
const Transaction = require('./models/Transaction');

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–æ—É—Ç /addbalance
app.post('/addbalance', async (req, res) => {
    let txRecord;
    try {
        const { address, transactionHash } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        const existingTx = await Transaction.findOne({ txHash: transactionHash });
        if (existingTx) {
            return res.status(400).send('Transaction already processed');
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        txRecord = new Transaction({
            userAddress: address.toLowerCase(),
            txHash: transactionHash,
            status: 'pending'
        });
        await txRecord.save();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        const tx = await provider.getTransaction(transactionHash);
        if (!tx) {
            await txRecord.updateOne({ status: 'failed' });
            return res.status(400).send('Transaction not found');
        }
        
        // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const receipt = await tx.wait();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (receipt.status !== 1 || tx.to.toLowerCase() !== wallet.address.toLowerCase()) {
            await txRecord.updateOne({ status: 'failed' });
            return res.status(400).send('Invalid transaction');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
        const value = tx.value;
        const amountInEth = ethers.utils.formatEther(value);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await Promise.all([
            User.updateOne(
                { address: address.toLowerCase() },
                { $inc: { balance: parseFloat(amountInEth) } }
            ),
            txRecord.updateOne({
                status: 'completed',
                amount: parseFloat(amountInEth),
                blockNumber: receipt.blockNumber
            })
        ]);
        
        res.send({ success: true, newBalance: amountInEth });
    } catch (error) {
        console.error(error);
        if (txRecord) {
            await txRecord.updateOne({ status: 'failed' });
        }
        res.status(500).send('Server error');
    }
});
app.get('/testdb', async (req, res) => {
    try {
        const users = await User.find();
        const txs = await Transaction.find();
        res.send({ users, txs });
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// –ù–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
app.get('/transactions/:address', async (req, res) => {
    try {
        const transactions = await Transaction.find({ 
            userAddress: req.params.address.toLowerCase() 
        }).sort({ timestamp: -1 });
        
        res.send(transactions);
    } catch (error) {
        res.status(500).send('Server error');
    }
});

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ TON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ ===
app.post('/api/ton/add-transaction', async (req, res) => {
  try {
    const { txHash, telegramId, amount } = req.body;
    if (!txHash || !telegramId || !amount) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã txHash, telegramId –∏ amount' });
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    const exists = await TonTransaction.findOne({ txHash });
    if (exists) {
      return res.status(400).json({ error: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' });
    }
    const tx = new TonTransaction({ txHash, telegramId, amount, status: 'pending' });
    await tx.save();
    res.json({ ok: true, message: 'TON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', tx });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ TON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ TON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
});

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ TON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è ton.js) ===
app.get('/api/ton/check-status/:txHash', async (req, res) => {
  try {
    const { txHash } = req.params;
    if (!txHash) return res.status(400).json({ status: 'error', error: 'txHash required' });
    const tx = await TonTransaction.findOne({ txHash });
    if (!tx) return res.status(404).json({ status: 'not_found' });
    if (tx.status === 'confirmed') {
      return res.json({ status: 'confirmed' });
    } else {
      return res.json({ status: 'pending' });
    }
  } catch (err) {
    res.status(500).json({ status: 'error', error: err.message });
  }
});



// === CRON: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–Ω–≤–æ–π—Å–æ–≤ CryptoBot ===
cron.schedule('*/2 * * * *', async () => {
  try {
    const invoices = await Invoice.find({ status: 'pending' });
    for (const invoice of invoices) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CryptoBot API
        const invoicesData = await cryptoBotClient.getInvoices({ invoice_ids: [invoice.invoiceId] });
        const invoiceData = invoicesData.items?.[0];
        if (invoiceData && invoiceData.status === 'paid') {
          invoice.status = 'paid';
          await invoice.save();
          // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await User.findOne({ telegramId: invoice.telegramId });
          if (user) {
            user.balance += invoice.amount;
            await user.save();
            console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${invoice.telegramId} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${invoice.amount} TON`);
          }
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–∞ ${invoice.invoiceId}:`, err?.response?.data || err);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–æ–≤ CryptoBot:', err);
  }
});

// === CRON: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ TON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ===
cron.schedule('*/2 * * * *', async () => {
  try {
    const pendingTxs = await TonTransaction.find({ status: 'pending' });
    for (const tx of pendingTxs) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ toncenter (–∏—Å–ø–æ–ª—å–∑—É–µ–º BOC –∫–∞–∫ hash, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ hash)
        const response = await axios.get(
          `https://tonapi.io/v2/blockchain/transactions/${tx.txHash}`
        );
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ —É—Å–ø–µ—à–Ω–∞
        if (response.data && response.data.transaction && response.data.transaction.status === 'finalized') {
          tx.status = 'confirmed';
          await tx.save();
          // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await User.findOne({ telegramId: tx.telegramId });
          if (user) {
            user.balance += tx.amount;
            await user.save();
            console.log(`TON: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${tx.telegramId} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${tx.amount} TON`);
          }
        }
      } catch (err) {
        // –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        // –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: console.error(`TON: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${tx.txHash}:`, err?.response?.data || err);
      }
    }
  } catch (err) {
    console.error('TON: –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', err);
  }
});



// ‚úÖ –°–æ–∑–¥–∞—ë–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤—Ä—É—á–Ω—É—é (–¥–ª—è WebSocket)
const server = http.createServer(app); // ‚úÖ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º express –≤ http-—Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ server });

let clients = new Set();

wss.on('connection', (ws) => {
  clients.add(ws);
  console.log('–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–ª–∏–µ–Ω—Ç. –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω:', clients.size);
  broadcastOnline();

  ws.on('close', () => {
    clients.delete(ws);
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω:', clients.size);
    broadcastOnline();
  });
});

function broadcastOnline() {
  const count = clients.size;
  const message = JSON.stringify({ online: count });

  clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message);
    }
  });
}
app.get('/users/:param')  // –û—à–∏–±–∫–∞: –ø–æ—Å–ª–µ `:` –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

// üöÄ –∑–∞–ø—É—Å–∫
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

